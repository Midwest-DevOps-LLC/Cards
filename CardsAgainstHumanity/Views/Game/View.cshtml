@using Microsoft.AspNetCore.Http

@model CardsAgainstHumanity.Models.GameView

@{
    bool newDeck = Model.Game.GameID.HasValue == false;


    ViewData["Title"] = "View - " + (newDeck ? "New Game" : Model.Game.Name);
    ViewBag.Page = "Game";

    var userID = Context.Session.GetInt32("UserID");

    bool allowedToEdit = false;

    if (userID.HasValue)
    {
        allowedToEdit = (userID == Model.Game.CreatedBy || userID == 1 || newDeck);
    }
}

<div class="row">
    <div class="col-md-1"></div>
    <div class="col-md-10" style="background-color:white; border-radius:.25em; padding:2em;">
        <h1>@(newDeck ? "New Game" : Model.Game.Name)</h1>
        <hr />
        <br />
        <div class="row">
            <div class="col-lg-6">
                <h3>Details</h3>
                <hr />

                <div class="form-group">
                    <label for="name">Name</label>
                    <input type="text" class="form-control" id="name" placeholder="Game Name" value="@(newDeck ? "" : Model.Game.Name)" @(allowedToEdit ? "" : "disabled")>
                </div>

                <br />
                <br />

                <h3>Options</h3>
                <hr />
                <div class="form-group">
                    @foreach (var option in Model.GameOptionsAvailable)
                    {

                        var isChecked = Model.Game.GameOptions.Where(x => x.GameOptionID == option.GameOptionID).Any();


                        <div class="form-check form-check-inline">
                            <input type="checkbox" class="form-check-input game-options" id="@option.GameOptionID" @(isChecked ? "checked='true'" : "") @(allowedToEdit ? "" : "disabled")>
                            <label class="form-check-label" for="@option.GameOptionID">@option.Name</label>
                        </div>
                    }
                </div>

                @if (newDeck == false)
                {
                    <p>Created by: @Model.Game.CreatedBy</p>
                }

            </div>
            <div class="d-lg-none" width="100%">
                &nbsp;
            </div>
            <div class="col-lg-6">
                <h3>Decks</h3>
                <hr />

                @if (allowedToEdit)
                {
                    <input type="button" class="btn btn-success" data-toggle="modal" data-target="#exampleModal" value="+ Add" />
                }

                <br />
                <div style="overflow:auto; max-height:30vh;">
                    <table class="table table-striped table-responsive-md" id="tblWhiteCards">
                        <tr><th>Name:</th>@(allowedToEdit ? Html.Raw("<th></th>") : null)</tr>
                        @foreach (var card in Model.Game.Decks)
                        {
                            <tr id="c@(card.DeckID)">
                                <td>@Html.Raw(card.Name)</td>
                                @if (allowedToEdit)
                                {
                                    <td><input type="button" class="btn btn-danger" onclick="RemoveCard(@card.DeckID)" value="delete" /></td>
                                }
                            </tr>
                        }
                    </table>
                </div>
            </div>
        </div>

        <hr />
        @if (allowedToEdit)
        {
            <input type="button" id="submit" class="btn btn-success float-right" onclick="Save()" value="Save" />
        }
        @if (Model.Game.GameID.HasValue && userID.HasValue)
        {
            <input type="button" id="submit" class="btn btn-info float-right" onclick="window.location.href = '/Game/Play/@Model.Game.GameID'" value="Play" />
        }
        <input type="button" id="submit" class="btn btn-primary float-right" onclick="window.location.href = '/Game/Index'" value="Back" />

    </div>
    <div class="col-md-1"></div>
</div>

<!-- Modal -->
<div class="modal fade" id="exampleModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document" style="max-width: 80%">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Add cards</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body" id="modalCardListBody">
                <h3>Options</h3>
                <hr />

                <div class="row">
                    <div class="col-md-6">
                        <div class="form-group">
                            <label for="filterType">Select card filter:</label>
                            <select class="form-control" id="deckFilter">
                                <option id="s1">Default & Your Cards</option>
                                <option id="s2">Default</option>
                                <option id="s3">Your Cards</option>
                                <option id="s4">All Cards</option>
                            </select>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            <label for="searchName">Name:</label>
                            <input type="text" class="form-control" id="searchName" placeholder="">
                        </div>
                    </div>
                </div>


                <input type="button" class="btn btn-primary float-right" onclick="LoadCardList()" value="Search" />

                <div id="modalWhiteCardTable" style="">
                    Loading...
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>

        $(document).ready(function () {
            LoadCardList();
        });

        function AddCard(id, text, element) {
            if (arr().includes(id) == false) {
                $('table#tblWhiteCards').append("<tr id='c" + id + "'><td>" + text + "</td><td><input type='button' class='btn btn-danger' onclick='RemoveCard("+id+")' value='delete' /></td></tr>");

                //$(element).closest('tr').remove();

                addSelectedCardID(id);
            }
            else {
                alert("Deck already in table")
            }
        }

        var selectedCardIDs = @("[" + string.Join(",", Model.Game.Decks.Select(x => x.DeckID)) + "]");

        function addSelectedCardID(id) {
            if (selectedCardIDs.includes(id) == false) {
                selectedCardIDs.push(id)
                HideCardInList(id);

                return true;
            } else {
                HideCardInList(id);
                return false;
            }
        }

        function removeSelectedCardID(id) {
            if (selectedCardIDs.includes(id) == false) {

                return false;
            } else {
                ShowCardInList(id);

                return true;
            }
        }

        function HideCardInList(id) {
            $('#r' + id).hide();
        }

        function ShowCardInList(id) {
            $('#r' + id).show();
        }

        function LoadCardList() {
            $.ajax({
                url: '@Url.Action("DeckList", "Deck")',
                type: 'POST',
                traditional: true,
                data: {
                    "filterName": $('#searchName').val(),
                    "filterDeck": $('#deckFilter').find(":selected").attr('id')
                },
                success: function(msg) {
                    $('#modalWhiteCardTable')[0].innerHTML = msg;

                    //Remove already selected cards
                    for (var i = 0; i < selectedCardIDs.length; i++) {
                        HideCardInList(selectedCardIDs[i]);
                    }
                }
            });

            //hide ids that have already been added

        }

        function RemoveCard(id) { //need to unhide card in list
            $('table#tblWhiteCards tr#c' + id).remove();

            removeSelectedCardID(id);
        }

        function Save() {
            $("#submit").prop("disabled", true);

            $.ajax({
                url: '@Url.Action("Save", "Game")',
                type: 'POST',
                traditional: true,
                data: {
                    "GameID": @(newDeck ? "null" : Model.Game.GameID.GetValueOrDefault().ToString()),
                    "GameName": $('#name').val(),
                    "DecksIDs": [arr()],
                    "OptionsIDs": [arrOptions()],
                    "Message": ""
                },
                success: function(msg) {
                    console.log(msg);

                    if (msg.error == true) {
                        alert(msg.message);
                        $("#submit").prop("disabled", false);
                    }

                    window.location.href = '@Url.Action("Index", "Game")';
                },
                complete: function (msg, bruh) {

                }
            });
        }

        function arr() {
            var listOfWhiteCardIDs = [];

            $("#tblWhiteCards tr").each(function () {
                if (this.id != "") {
                    listOfWhiteCardIDs.push(parseInt(this.id.replace("c", "")));
                }
            });

            return listOfWhiteCardIDs;
        }

        function arrOptions() {
            var listOfWhiteCardIDs = [];

            $(".game-options").each(function (i, e) {
                if ($(e).is(':checked')) {
                    console.log("checked")
                    listOfWhiteCardIDs.push(parseInt(this.id));
                } else {
                    console.log(this.id);
                    console.log($(this.id));
                    console.log(i);
                    console.log(e);

                    console.log("not checked");
                }
            });

            return listOfWhiteCardIDs;
        }
    </script>
}